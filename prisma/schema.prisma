generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  role          String    @default("USER")

  accounts        Account[]
  sessions        Session[]
  managedProjects ManagedProject[]

  stripeCustomerId       String?   @unique
  stripeSubscriptionId   String?   @unique
  stripePriceId          String?
  stripeCurrentPeriodEnd DateTime?
  Report                 Report[]

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Manager {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  userId String  @db.ObjectId
  name   String?

  managedProjects ManagedProject[]

  @@map(name: "managers")
}

model ManagedProject {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  projectName   String
  projectType   String
  clientName    String
  startDate     DateTime
  endDate       DateTime
  budget        Float?
  projectStatus String
  description   String?

  dimension   Dimension?
  dimensionId String?    @unique @db.ObjectId

  layoutPreferences Layout[]
  materials         Material[]

  architecturalStyle String?

  structuralFeatures StructuralFeature[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  managerId String  @db.ObjectId
  manager   Manager @relation(fields: [managerId], references: [id])

  userId  String?  @db.ObjectId
  user    User?    @relation(fields: [userId], references: [id])
  scenes  Scene[]
  designs Design[]
  Report  Report[]

  @@map("managed_projects")
}

model Dimension {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  length Float
  width  Float
  height Float?
  units  String

  project        ManagedProject @relation(fields: [projectId], references: [id])
  projectId      String         @db.ObjectId @unique
  managedProjectId String?         @db.ObjectId

  @@map("project_dimensions")
}

model Layout {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  type        String
  description String?
  projectId   String         @db.ObjectId
  project     ManagedProject @relation(fields: [projectId], references: [id])

  @@map(name: "project_layouts")
}

model Material {
  id         String         @id @default(auto()) @map("_id") @db.ObjectId
  type       String
  properties String?
  projectId  String         @db.ObjectId
  project    ManagedProject @relation(fields: [projectId], references: [id])

  @@map(name: "project_materials")
}

model StructuralFeature {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  type        String
  description String?
  quantity    Int?
  projectId   String         @db.ObjectId
  project     ManagedProject @relation(fields: [projectId], references: [id])

  @@map(name: "project_structural_features")
}

model Scene {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  projectId   String         @db.ObjectId
  project     ManagedProject @relation(fields: [projectId], references: [id])
  meshes      Mesh[]
  lights      Light[]
  cameras     Camera[]
  materials   Materials[]
  environment Environment?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model Mesh {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  type       String
  sceneId    String     @db.ObjectId
  scene      Scene      @relation(fields: [sceneId], references: [id])
  position   String
  rotation   String
  scaling    String
  materialId String?    @db.ObjectId
  material   Materials? @relation(fields: [materialId], references: [id])
  properties String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Materials {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  type       String
  sceneId    String   @db.ObjectId
  scene      Scene    @relation(fields: [sceneId], references: [id])
  meshes     Mesh[]
  properties String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Light {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  type      String
  sceneId   String   @db.ObjectId
  scene     Scene    @relation(fields: [sceneId], references: [id])
  position  String
  intensity Float
  diffuse   String?
  specular  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Camera {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  type       String
  sceneId    String   @db.ObjectId
  scene      Scene    @relation(fields: [sceneId], references: [id])
  position   String
  target     String
  properties String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Environment {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sceneId      String   @unique @db.ObjectId
  scene        Scene    @relation(fields: [sceneId], references: [id])
  skyboxType   String?
  groundColor  String?
  ambientColor String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Design {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  projectId String         @db.ObjectId
  project   ManagedProject @relation(fields: [projectId], references: [id])

  designData String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Report {
  id         String         @id @default(auto()) @map("_id") @db.ObjectId
  content    String
  projectId  String         @db.ObjectId
  project    ManagedProject @relation(fields: [projectId], references: [id])
  command    String?
  reportType String         @default("general")
  userId     String         @db.ObjectId
  user       User           @relation(fields: [userId], references: [id])
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  @@map("reports")
}
